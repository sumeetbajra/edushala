var validator = require('validator');
var rs = require('../misc/rs');

var isNumericType = function (type) {
    return (type == 'int' || type == 'bigint' || type == 'long' || type == 'decimal' || type == 'tinyint' || type == 'smallint');
};

var validations = {
    checkSize: function (value, schema, field_name, data, scope) {
        if (!value)
            return;
        var me = scope;
        if (schema.type == 'string') {
            if (value.length > schema.max) {
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' length cannot be more than ' + schema.max + ' characters. Current length is ' + value.length + '.',
                    field: field_name,
                    type: 'size'
                });
            }
            if (value.length < schema.min) {
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' length cannot be less than ' + schema.min + ' characters. Current length is ' + value.length + '.',
                    field: field_name,
                    type: 'size'
                });
            }
            return;
        }
        if (isNumericType(schema.type)) {
            if (value > schema.max) {
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' size cannot be more than ' + schema.max + '. Current size is ' + value + '.',
                    field: field_name,
                    type: 'size'
                });
            }
            if (value < schema.min) {
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' size cannot be less than ' + schema.min + '. Current size is ' + value + '.',
                    field: field_name,
                    type: 'size'
                });
            }
            return;
        }
    },
    checkDataType: function (value, schema, field_name, data, scope) {
        if (value == undefined)
            return;
        var me = scope;
        var err_base = {
            message: rs.util.changeCase.title(field_name) + ' must be an ' + schema.type + '.',
            field: field_name,
            type: 'data_type'
        }
        var strVal = value.toString()
        if (schema.type == 'email') {
            if (!validator['isEmail'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'currency') {
            if (!validator['isCurrency'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'url') {
            if (!validator['isURL'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'int' || schema.type == 'long' || schema.type == 'bigint') {
            if (!validator['isInt'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'decimal') {
            if (!validator['isDecimal'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'date') {
            if (!validator['isDate'](strVal))
                me.addError(err_base);
            return;
        }
        if (schema.type == 'bool') {
            if (!validator['isBoolean'](strVal))
                me.addError(err_base);
            //data[field_name] = val;
            return;
        }
        if (schema.type == 'select') {
            if (!schema.choices)
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' is a select type, there more must have valid choices',
                    field: field_name,
                    type: 'data_type'
                });
            if (!rs.util.array.exists(schema.choices, value))
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' is a select type. Selection must be one of the valid choices [' + schema.choices.join(',') + ']',
                    field: field_name,
                    type: 'data_type'
                });
            return;
        }
    },
    checkRequired: function (value, schema, field_name, data, scope) {
        var me = scope;
        if (schema.required) {
            if (value == null || value == undefined)
                me.addError({
                    message: rs.util.changeCase.title(field_name) + ' is required.',
                    field: field_name,
                    type: 'required'
                });
        }
    },
    checkValidator: function (value, schema, field_name, data, scope) {
        var me = scope;
        if (schema.validator) {
            if (typeof (schema.validator) == 'string') {
                if (!validator[schema.validator](value))
                    me.addError({
                        message: 'Validation failed [' + schema.validator + '].',
                        field: field_name,
                        type: 'validator'
                    })
                return;
            }
            if (!schema.validator(value, schema, field_name, data)) {
                me.addError({message: 'Custom validation failed.', field: field_name, type: 'custom_validator'})
            }
        }
    }
};

module.exports = validations;