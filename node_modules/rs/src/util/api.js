var classy = require('classy');
var rs = require('./core');

/**
 * @classdesc Helper class for api.
 * @constructor
 */
var api = classy.define({
    forceInstance: true,
    init: function (cfg) {
        cfg = cfg || {};
        this.context = cfg.context || null;
        return this;
    },

    execute: function (cfg) {
        if(!this.context)
            throw new Error('Must have a valid context to execute');

        this.executeWithContext(this.context, cfg);
    },

    executeWithContext:function(ctx, cfg){
        var me = this;
        var params = cfg.params || {};

        if(!ctx)
            throw new Error('Must pass a valid context to execute');

        //need to pass rs.data as it is in lower hierarchy (rs.data) than rs.core
        if(!ctx.rs_data)
            throw new Error('Must pass rs_data {rs_data: rs.data} in context for this util to work');

        if(!cfg.serviceFn)
            throw new Error('Must send service function (serviceFn).');

        params.success = function (results) {
            if(cfg.send_raw_data) {
                ctx.router.res.send(results);
            } else {
                ctx.router.res.send(me.prepareData(results));
            }
        };


        params.failure = function (error) {
            ctx.router.res.send(error);
        };

        if(params.model) {
            if (!params.model.isModel) {
                if (!cfg.no_session) {
                    if (!Array.isArray(params.model.schema))
                        params.model.schema = [params.model.schema];
                    params.model.schema.push('session_id');
                    rs.apply(params.model.data, {session_id: ctx.session_id});
                }
                params.model = ctx.rs_data.model(params.model);
            }
        }

        cfg.serviceFn(params);
    },
    executeWithResponse:function (res,cfg) {
        var me = this;
        var params = cfg.params || {};

        if(!cfg.serviceFn)
            throw new Error('Must send service function.');

        params.success = function (results) {
            if(cfg.send_raw_data) {
                res.send(results);
            } else {
                res.send(me.prepareData(results));
            }
        };

        params.failure = function (error) {
            res.send(error);
        };

        if(params.model)
            if(!params.model.isModel)
                params.model = ctx.rs_data.model(params.model);

        cfg.serviceFn(params);
    },

    prepareData: function (c) {
        if (c.is_error) {
            return c;
        }
        if (c.null_results) {
            return { success: true, type: 'na', data: null }
        }

        var r = { success: true };
        var data = c.data;
        if (!data)
            data = c;

        if (!c.type)
            r.type = Array.isArray(data) ? 'array' : typeof (data);
        else
            r.type = c.type;

        if (!c.count)
            r.count = Array.isArray(data) ? data.length : (Object.keys(data).length === 0?0:1);
        else
            r.count = c.count;
        r.data = data;
        return r;
    },

    not_imp : function (req, res, next) {
        var err = new Error('Not Implemented - ' + req.url);
        err.status = 404;
        next(err);
    }
});

module.exports = api;