var classy = require('classy');
var nuuid = require('uuid');
const crypto = require('crypto');
var otp = require('otplib/lib/authenticator');
var changeCase = require('case');
var stringFormat = require('string-format');
/** @namespace */
var rs = {
    core: require('../core'),
    error: require('../error').createAppError
};

/**
 * @classdesc Helper class with miscelleanous utilities.
 * @exports rs.util
 * @constructor
 */
module.exports = /** @lends rs.util# */{
    /**
     * Applies default properties to children objects
     * @function
     * @param {object} full_object - Full object tree.
     */
    changeCase: changeCase,
    format: stringFormat,
    apply: function (object, config, defaults) {
        if (defaults) {
            apply(object, defaults);
        }

        if (object && config && typeof config === 'object') {
            var i, j, k;

            for (i in config) {
                object[i] = config[i];
            }
        }

        return object;
    },
    applyDefaults: function (parent) {
        var new_obj = {};
        for (var child_name in parent) {
            var child = parent[child_name]
            if (child_name.substring(0, 1) != '_') {
                new_obj[child_name] = {};
            }
            for (var gchild_name in child) {
                var parent_defaults = rs.core.apply({}, parent._defaults);
                var child_defaults = rs.core.apply(parent_defaults, child._defaults);
                var gchild = child[gchild_name];
                gchild = rs.core.apply(child_defaults, gchild);
                if (child_name.substring(0, 1) != '_' && gchild_name.substring(0, 1) != '_') {
                    new_obj[child_name][gchild_name] = gchild;
                }
            }
        }
        return new_obj;
    },
    cloneObject: function (obj) {
        return JSON.parse(JSON.stringify(obj))
    },
    /**
     * Find all the placeholder positions in text. Default placeholder is {{name}}
     * @function
     * @param {string} str - text with placeholders.
     * @param {regex} rex - Regular expression to pass. Default /\{\{(.*?)\}\}/g.
     */
    getPlaceholder: function (str, rex) {
        var regex = rex || /\{\{(.*?)\}\}/g;
        var result = [];

        while (match = regex.exec(str)) {
            result.push(match[1]);
        }

        return result;
    },

    getProjectInfo: function () {
        var file = require.main.filename;
        return {
            start_file: file,
            root_path: require('path').dirname(file)
        }
    },
    hash: function (data, algorithm) {
        algorithm = algorithm || 'sha512';
        const hash = crypto.createHash(algorithm);
        hash.update(data);
        return hash.digest('hex');
    },
    requireProperty: function (obj, properties, createMissing) {
        var props = properties.split(',');
        for (var p in props) {
            var property = props[p];
            if (obj[property] == undefined) {
                if (!createMissing)
                    throw rs.error('property [' + property + '] is missing.' );
                else
                    obj[property] = null;
            }
        }
    },
    getChabi2: function (key) {
        return otp.generate(key);
    },
    uuid: function (v) {
        if (v == 'v1')
            return nuuid.v1();
        return nuuid.v4();
    },

    //Should not be using this
    wait: function (ms){
        console.info('\x1b[31mNotice!!! Should not use rs.util.wait function in javascript. Please use this in dev or test enviroment only\x1b[0m');
        var start = new Date().getTime();
        var end = start;
        while(end < start + ms) {
            end = new Date().getTime();
        }
    }
};