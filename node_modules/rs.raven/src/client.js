var rs = require('./misc/rs');
var fs = require('fs');
/**
 * @classdesc
 * @constructor
 */
var carriers = {
    default: {
        type: 'email',
        config: {
            service:'sparkpost',
            auth: {
                user: 'SMTP_Injection',
                pass: '5fe8d06e60e065e21bdd78f5acc8557393ad2901'
            }
        }
    },
    facebook: {
        type: 'messenger',
        access_token: 'EAASAbP7OZC8IBAKlzjm3Fnm810cIbLjawHLvmdZCoeTb8EWRiwbvaVje3PjIpZChvADSEcfsvYwVbasRCJ8iEGL6E7ZAyfgJ2sCX5ZCJarhdJMOo96SOxtrmNhzZBqwxXmqbax4LaxTDXZALnNH8vyPe3bkyPbFHoRZAZCArMHp99LwZDZD'
    }
};

var client = rs.classy.define(/** @lends rs.raven.services# */{
    init: function (c) {
        rs.apply(this, c);
    },
    send: function (msg, options) {
        options = options || {};

        //Choose the right carrier, if not choose default
        var carrier = options.carrier || 'default';
        if(typeof(carrier)==='string'){
            carrier = this.carriers[carrier];
        }
        if(!carrier)
            throw new Exception('Invalid carrier!');

        //Template formatting
        if (typeof(msg.body)==='object' && msg.body.file) {
            try {
                msg.body = fs.readFileSync(msg.body.file, 'utf8');
            } catch (e){
                throw new rs.error(`Template path not found. [${msg.body.file}]`);
            }
        }

        //formatting using placeholders
        if (msg.data) {
            msg.body = rs.util.format(msg.body, msg.data);
            if (msg.subject)
                msg.subject = rs.util.format(msg.subject, msg.data);
        }

        //Call the relevant transporter and send
        var transportCls = require('./carriers/' + carrier.type);
        if(!transportCls)
            throw new Exception('Unknown carrier!');
        var transport = transportCls({config: carrier.config});
        transport.send(msg, options)
    }
});

module.exports = client;