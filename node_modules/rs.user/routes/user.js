var rs = require('../misc/rs');
var express = require('express');
var router = express.Router();

module.exports = function (context) {
    var not_imp = function (req, res, next) {
        var err = new Error('Not Implemented');
        err.status = 404;
        next(err);
    };

    var params;
    var user = context.service.user;
    var comm = context.service.comm;

    router.all('*', function (req, res, next) {
        params = {};
        params.success = function (results) {
            res.send(results);
        };
        params.failure = function (error) {
            res.json(error);
        };
        next();
    });

    router.get('/', function (req, res) {
        user.list(params);
    });

    router.post('/signup', function (req, res) {
        params.data = req.body;
        user.signup(params);
    });

    router.post('/exists', function (req, res) {
        params.data = {address: req.body.address || req.body.email || req.body.phone};
        user.exists(params);
    });

    router.put('/', function (req, res) {
        var data = req.body;
        data.user_uuid = rs.util.uuid();
        data.username = data.username || data.email;
        data.password = data.password ? bcrypt.hashSync(data.password, 10) : null;
        params.data = data;
        user.add(params);
    });

    //single users
    router.get('/:uuid', function (req, res) {
        params.data = { user_uuid: req.params.uuid };
        user.get(params);
    });

    router.post('/:uuid', function (req, res) {
        var patch_fields = [];
        req.body.user_uuid = req.params.uuid;
        for (var key in req.body)
        {
            patch_fields.push(key);
        }

        var model = rs.data.model({
            autoValidation: false,
            schema: context.schema.user,
            data: req.body
        });
        user.update(rs.apply({ model: model, fields: patch_fields }, params));
    });
    router.delete('/:uuid', not_imp);

    //user roles
    router.get('/:uuid/roles', function (req, res) {
        params.data = { user_uuid: req.params.uuid };
        user.role.list(params);
    });
    router.put('/:uuid/roles', function (req, res) {
        params.data = { user_uuid: req.params.uuid, roles: JSON.stringify(req.body) };
        user.role.add(params);
    });

    //ToDo handle when all the roles are removed
    router.delete('/:uuid/roles', function (req, res) {
        params.data = { user_uuid: req.params.uuid, roles: JSON.stringify(req.body) };
        user.role.remove(params);
    });

    //user profile
    router.get('/:uuid/password', not_imp);

    //user communication
    router.get('/:uuid/comms', function (req, res) {
        var data = { user_uuid: req.params.uuid };
        if (req.query)
            rs.apply(data, req.query);
        var model = rs.data.model({
            schema: [{ name: 'user_uuid', type: 'guid' }, { name: 'medium', required: false }],
            data: data
        });
        comm.list(rs.apply({ model: model }, params));
    });

    router.put('/:uuid/comms', function (req, res) {
        var model = rs.data.model({
            schema: [{ name: 'user_uuid', type: 'guid' },
                { name: 'address', type: 'string' },
                { name: 'is_primary', type: 'bool' },
                { name: 'is_verified', type: 'bool' },
                { name: 'date_verified', type: 'datetime' },
                { name: 'medium', type: 'select', choices: ['email','phone'] },
                { name: 'category', type: 'select', choices: ['work', 'home', 'mobile'] }
            ],
            data: rs.apply(req.body, { user_uuid: req.params.uuid })
        });
        comm.add(rs.apply({ model: model }, params));
    });
    router.post('/:uuid/comms/:id/make_primary', not_imp);
    router.delete('/:uuid/comms', function (req, res) {
        if (!req.body.id && !req.body.address)
            throw rs.error('Must send either id or address in the body');
        var model = rs.data.model({
            schema: [
                { name: 'user_uuid', type: 'guid' },
                { name: 'id', type: 'long', required: false },
                { name: 'address', type: 'string', required: false }
            ],
            data: rs.apply(req.body, { user_uuid: req.params.uuid })
        });
        comm.remove(rs.apply({ model: model }, params));
    });

    router.get('/misc/verification/:verify_code', not_imp);
    return router;
};