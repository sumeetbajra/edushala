var rs = require('../misc/rs');
var name = require('../util/name');
var generator = require('generate-password');
var bcrypt = require('bcryptjs');
var token = require('../util/token')();
var db = null;

var service = rs.classy.define({
    forceInstance: true,
    init: function (ctx) {
        this.ctx = ctx;
        db = ctx.client.db;
    },
    exists: function (c) {
        var success = function (r) {
            if(r)
                c.success(true);
            else
                c.success(false);
        };
        db.get({
            query: 'Select * from rsu_comms where address=@address',
            schema: ['address'],
            data: c.data,
            success: success,
            failure: c.failure
        });
    },
    add: function (c) {
        var schema = this.ctx.schema.user;
        schema.password.required = true;
        var model = rs.data.model({
            schema: schema,
            data: c.data
        });
        var success = c.success;
        rs.apply(c, {
            procedure: "rsu_add",
            model: model,
            fields: 'user_uuid,email,password,name',
            success: function (results) {
                //Very Important !!!
                delete results.password;
                success(results);
            }
        });
        db.get(c);
    },
    signup: function (c) {
        var me = this;
        var randomPw = false;
        var password = c.data.password;

        if(!password)
        {
            password = generator.generate({
                length: 10,
                numbers: true
            });
            randomPw = true;
        }

        c.data.password = bcrypt.hashSync(password, 10);
        var model = rs.data.model({
            schema: this.ctx.schema.user,
            data: c.data
        });
        db.get({
            procedure: "rsu_signup",
            fields: 'email,password,name',
            model: model,
            success: function (results) {
                var tpl;
                if(randomPw)
                    tpl = me.ctx.templates.email.signup_pw;
                else
                    tpl = me.ctx.templates.email.signup;

                console.log(randomPw);

                results.name_parts = name.parse(results.name);
                results.password = password;
                //Verification email
                try {
                    me.ctx.raven.send({
                        data: results,
                        body: tpl.body,
                        from: tpl.from,
                        to: results.email,
                        subject: tpl.subject
                    }, {
                        fail: function (error) {
                            rs.error(error)
                        }
                    });
                } catch (e){
                    console.log(e);
                }

                //Very Important !!!
                delete results.password;

                var roles =[], permissions = [];
                try {
                    for (var role in results.roles) {
                        roles.push(results.roles[role].role_name);
                    }
                } catch (ex) { }

                try {
                    for (var permission in results.permissions) {
                        permissions.push(results.permissions[permission].perm_name);
                    }
                } catch (ex) { }

                //Creating token
                results.rs_token = token.create( {
                    user_uuid: results.user_uuid,
                    name: results.name,
                    name_parts: results.name_parts,
                    username: results.username,
                    roles: roles,
                    permissions: permissions
                });

                c.success(results);
            },
            failure: c.failure
        });
    },
    get: function (c) {
        var me = this;
        var success = c.success;
        rs.apply(c, {
            schema: [{ name: 'user_uuid', type: 'guid' }],
            procedure: 'rsu_get',
            formatter: {comms:'json'},
            success: function (data) {
                delete data.password;
                data.name_parts = name.parse(data.name);
                data = me.getPrimaryComms(data);
                success(data);
            }
        });
        return db.get(c);
    },
    list: function (c) {
        c.procedure = "rsu_list";
        db.list(c);
    },
    updateProfile: function (c) {
        var me = this;
        var schema = rs.util.cloneObject(this.ctx.schema.user);
        schema.phone.required = true;
        var model = rs.data.model({
            schema: schema,
            data: c.data
        });
        var success = c.success;
        rs.apply(c, {
            procedure: "rsu_update",
            model: model,
            formatter: {comms:'json'},
            fields: 'user_uuid,name,email,phone',
            success: function (data) {
                //Very Important !!!
                delete data.password;
                data.name_parts = name.parse(data.name);
                data = me.getPrimaryComms(data);
                success(data);
            }
        });
        db.get(c);
    },
    update: function (c) {
        var allowed_fields = ['first_name', 'last_name', 'mid_name']
        var update_fields = allowed_fields.filter(function (f) {
            return rs.util.array.exists(c.fields, f);
        })
        if (update_fields.length == 0)
            throw rs.error('Must send at least one valid update field');

        var update_text = [];
        for (var uf in update_fields) {
            update_text.push(update_fields[uf] + '=@' + update_fields[uf]);
        }
        update_text = update_text.join(',');
        var params = {
            query: 'UPDATE rsu_t_users SET ' + update_text + ' where user_uuid=@user_uuid',
            model: c.model,
            fields: c.fields.join(','),
            success: function (r) {
                console.log(r);
                c.success(r);
            },
            failure: c.failure
        };

        db.execute(params)
    },
    getPrimaryComms: function (data) {
        var email = data.comms.filter(function (a) {
            return (a.medium=='email' && a.is_primary==true);
        });
        var phone = data.comms.filter(function (a) {
            return (a.medium=='phone' && a.is_primary==true);
        });
        if(email.length>0)
            data.email = email[0].address;
        if(phone.length>0)
            data.phone = phone[0].address;
        return data;
    },
    role: {
        add: function (c) {
            db.execute(rs.apply(c,{
                procedure: "rsu_roles_add",
                schema: [{ name: 'user_uuid', type: 'guid' }, 'roles']
            }));
        },
        list: function (c) {
            var params = rs.apply(c, {
                schema: [{ name: 'user_uuid', type: 'guid' }],
                procedure: 'rsu_roles_list',
                formatter: {permissions: 'json'}
            });
            db.list(c);
        },
        remove: function (c) {
            db.execute(rs.apply(c,{
                procedure: "rsu_roles_remove",
                schema: [{ name: 'user_uuid', type: 'guid' }, 'roles']
            }));
        }
    }
});

module.exports = service;