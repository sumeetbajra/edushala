var rs = require('../misc/rs');
var token = require('../util/token')();
var bcrypt = require('bcryptjs');
var name = require('../util/name');
var db = null;

var service = rs.classy.define({
    forceInstance: true,
    init: function (ctx) {
        this.ctx = ctx;
        db = ctx.client.db;
    },
    login_output: function (c, results) {
        //Very Important !!!
        delete results.password;

        var roles =[], permissions = [];
        try {
            for (var role in results.roles) {
                roles.push(results.roles[role].role_name);
            }
        } catch (ex) { }

        try {
            for (var permission in results.permissions) {
                permissions.push(results.permissions[permission].perm_name);
            }
        } catch (ex) { }

        results.name_parts = name.parse(results.name);

        //Creating token
        results.rs_token = token.create( {
            user_uuid: results.user_uuid,
            name: results.name,
            name_parts: results.name_parts,
            username: results.username,
            roles: roles,
            permissions: permissions
        });

        c.success(results);
    },
    login: function (c) {
        var me = this;
        db.get({
            procedure: "rsu_login",
            schema: ['username'],
            data: c.data,
            formatter: { permissions: 'json', roles: 'json'},
            success: function (results) {

                if(!bcrypt.compareSync(c.data.password, results.password)) {
                    c.failure('Invalid user credentials');
                    //throw rs.error('Invalid user credentials');
                    return;
                }

                //Notification
                // me.ctx.raven.send({
                //     body :'Login Test',
                //     from: 'Test<service@edushala.com>',
                //     to: 'santosh@rumsan.com'
                // });

                me.login_output(c, results);

            },
            failure: c.failure
        });
    },
    forgotPassword: function (c) {
        var me = this;
        var success = c.success;
        db.get(c, {
            procedure: "rsu_password_forgot",
            schema: [{name:'email',type:'email'}],
            formatter:{data:'json'},
            success: function (results) {

                var tpl = tpl = me.ctx.templates.email.forgot;
                results.data.name_parts = name.parse(results.data.name);

                //Send verification email
                try {
                    me.ctx.raven.send({
                        data: results.data,
                        body: tpl.body,
                        from: tpl.from,
                        to: results.data.address,
                        subject: tpl.subject
                    }, {
                        fail: function (error) {
                            rs.loge(error)
                        }
                    });
                } catch (e){
                    rs.loge(e.message);
                }
                success({email:results.data.address});
            }
        });
    },
    changePassword: function (c) {
        var me = this;
        if(!c.data.password)
            throw new rs.error('Must send a password');

        c.data.password = bcrypt.hashSync(c.data.password, 10);
        db.get({
            procedure: "rsu_password_changebycode",
            schema: ['code','password'],
            formatter: { permissions: 'json', roles: 'json'},
            data: c.data,
            success: function (results) {
                me.login_output(c, results);
            },
            failure: c.failure
        });
    },
    getVerificationInfo:function () {

    }
});

module.exports = service;